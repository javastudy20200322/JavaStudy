package summary.jaeyeon.example.chap07_oop2;

public class Ch7_MultipleChoice {

	
	/*Q3
	 * 오버라이딩의 정의와 필요성에 대해서 설명하시오
	 * A : 오버라이딩(overriding) 이란
	 * '조상 클래스로부터 상속받은 메서드를 자손 클래스에 맞게 "재정의" 하는 것을 말함.
	 * 조상 클래스로 부터 상속받은 메서드를 자손 클래스에서 그대로 사용할 수 없는 경우가
	 * 많기 때문에 오버라이딩이 필요하다.
	 */
	
	/*Q4
	 * 다음 중 오버라이딩의 조건으로 옳지않은 것은?(모두고르시오)
	 * a. 조상의 메서드와 이름이 같아야한다.
	 * b. 매개변수의 수와 타입이 모두 같아야한다.
	 * c. 접근 제어자는 조상의 메서드보다 좁은 범위로만 변경할 수 있다.
	 * d. 조상의 메서드보다 더 많은 수의 예외를 선언할 수 있다.
	 * 
	 * 자손 클래스에서 오버라이딩 하는 메서드는 조상 클래스의 메서드와
	 * - 이름이 같아야한다.
	 * - 매개변수가 같아야한다.
	 * - 리턴 타입이 같아야한다.
	 * 
	 */
	
	
	
	/*
	 * Q6 자손 클래스의 생성자에서 조상 클래스의 생성자를 호출해야하는 이유는 무엇?
	 * A : 조상에 정의된 인스턴스 변수들이 초기화 되도록 하기 위해서
	 */
	
	/*
	 * Q8 다음중 접근제어자를 접근 범위가 넓은 것에서 좁은 것의 순으로 바르게 나열한 것은?
	 * a. public - protected  - (default) - private		o
	 * b. public - (default) - protected - private		x
	 * c. (default) - public - protected - private		x
	 * d. private - protected - (default) - public		x
	 */
	
	
	/*
	 * Q9 다음 중 제어자 final을 붙일 수 있는 대상과 붙였을 때 그 의미를 적은 것이다.
	 * 옳지 않은 것은?(모두 고르시오)
	 * a. 지역변수 - 값을 변경할 수 없다.							o
	 * b. 클래스 - 상속을 통해 클래스에 새로운 멤버를 추가할 수 없다.		o
	 * c. 메서드 - 오버로딩을 할 수 없다. 							x - 오버로딩 이 아니라 오버라이딩을 할 수 없다.
	 * d. 멤버변수 - 값을 변경할 수 없다.							o
	 */
	
	/*Q12
	 * 다음 중 접근 제어자에 대한 설명으로 옳지 않은 것은?(모두 고르시오)
	 * a. public 은 접근제한이 전혀 없는 접근 제어자이다.
	 * b. (default)가 붙으면, 같은 패키지 내에서만 접근이 가능하다.
	 * c. 지역변수에도 접근 제어자를 사용할 수 있다.  					 x // 접근제어자를 사용할 수 있는 곳 : 클래스, 멤버변수, 메서드, 생성자
	 * d. protected 가 붙으면, 같은 패키지 내에서도 접근이 가능하다.
	 * e. protected 가 붙으면, 다른 패키지의 자손 클래스에서 접근이 가능하다.
	 */
	
	/*Q13
	 * Math 클래스의 생성자는 접근 제어자가 private 이다. 그 이유는 무엇인가?
	 * A : Math 클래스의 모든 메서드가 static 메서드이고 인스턴스 변수가 존재하지 않기 때문에
	 * 객채를 생성할 필요가 없당.(싱글톤으로 사용)
	 */

	
	/*Q24 다음 중 인터페이스의 장점이 아닌 것은?
	 * 
	 * a. 표준화를 가능하게 해준다.
	 * b. 서로 관계 없는 클래스들에게 관계를 맺어줄 수 있다.
	 * c. 독립적인 프로그래밍이 가능하다.
	 * d. 다중상속을 가능하게 해준다..
	 * e. 패키지간의 연결을 도와준다.
	 * 
	 */
	
	/* Q29
	 * 지역 클래스에서 외부 클래스의 인스턴스 멤버와 static 멤버에 모두 접근할 수 있지만
	 * 지역변수는 final 이 붙은 상수만 접근할 수 있는 이유는 무엇인가?
	 * 
	 */
	
	
}
